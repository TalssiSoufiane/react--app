{"version":3,"sources":["Components/Recette.js","App.js","serviceWorker.js","index.js"],"names":["Recette","state","recette","props","detail","isEdit","newIng","handleEditButton","setState","handleNewIngChange","e","currentTarget","value","handleNewIngSubmit","preventDefault","length","id","Date","getTime","nom","ings","push","editRecette","deleteIng","ingid","index","findIndex","ing","splice","deleteRecette","className","style","width","this","map","key","onClick","onSubmit","type","placeholder","onChange","React","Component","App","recettes","newRecette","handleNewRecetteSubmit","unshift","localStorage","setItem","JSON","stringify","handleNewRecetteChange","recetteEdited","removeItem","keys","Object","i","ingR","rec","parse","getItem","j","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb966eed.chunk.js","sourcesContent":["import React from 'react';\n\nclass Recette extends React.Component {\n\n    state = {\n        recette : this.props.detail,\n        isEdit : false,\n        newIng : ''\n    }\n\n                     /*changer la valeur de isEdit pour modifier*/\n    handleEditButton = () => {\n        this.setState({ isEdit : !this.state.isEdit});\n    }\n                    /*affecter la valeur a new ing*/\n    handleNewIngChange = (e) =>{\n        this.setState({newIng : e.currentTarget.value});\n    }\n                    /*ajouter un ingrediant a une recette */\n    handleNewIngSubmit = (e) =>{\n        e.preventDefault();\n        if(this.state.newIng.length>0){\n            const recette = this.state.recette;\n            const id = new Date().getTime();\n            const nom = this.state.newIng;\n            recette.ings.push({id, nom});\n            this.setState({newIng : ''});\n            this.props.editRecette(recette);\n        }\n    }\n                    /*supprimer ing d une liste*/\n    deleteIng = (ingid) =>{\n        const recette = this.state.recette;\n        const index = recette.ings.findIndex(function(ing){\n            return ing.id===ingid\n        })\n        recette.ings.splice(index,1);\n        this.props.editRecette(recette);\n    }\n                    /*supprimer une recette*/\n    deleteRecette = () => {\n        this.props.deleteRecette(this.state.recette.id);\n    }\n    \n    \n                    /**/\n    render() {\n        return (\n            <div className=\"col mb-4\">\n              <div className=\"card\" style={{width: \"18rem\"}}>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{this.state.recette.nom}</h5>\n                    <h6 className=\"card-subtitle mb-2 text-muted\">Ingrédients</h6>\n                    <ul className=\"list-group list-group-flush\">\n                        {this.state.recette.ings.map(ing => (\n                            <li className=\"list-group-item\" key={ing.id}>{ing.nom} <button className=\"btn btn-outline-danger\" onClick={() => this.deleteIng(ing.id)}>Supprimer</button></li>\n                        ))}\n                    </ul>\n                    { this.state.isEdit ? (<div><hr/><form onSubmit={this.handleNewIngSubmit}>\n                                                <div className=\"form-group\">\n                                                    <input type=\"text\" placeholder=\"Nom de l'ingrédient\" className=\"form-control\" value={this.state.newIng} onChange={this.handleNewIngChange} />\n                                                </div>\n                                                <button className=\"btn btn-outline-dark\">Ajouter</button>\n                                                </form><hr/></div>) \n                                            : (<div></div>) \n                    }\n                    <div className=\"mt-3 d-flex flex-wrap justify-content-around\">\n                        { this.state.isEdit ? (<button onClick={this.handleEditButton} className=\"btn btn-outline-success\">Enregister</button>) : (<button onClick={this.handleEditButton} className=\"btn btn-outline-secondary\">Modifier</button>) }\n                        <button onClick={this.deleteRecette} className=\"btn btn-outline-danger\">Supprimer</button>\n                    </div>\n                </div>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default Recette;","import React from 'react';\nimport './App.css';\nimport Recette from './Components/Recette.js';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends React.Component {\n  state = {\n    recettes : [],\n    newRecette : ''\n  }\n                /*ajouter */\n  handleNewRecetteSubmit = (e) =>{\n    e.preventDefault();\n    if(this.state.newRecette.length>0){\n      const recettes = [...this.state.recettes];\n      const id = new Date().getTime();\n      const nom = this.state.newRecette;\n      const ings = [];\n      recettes.unshift({ id, nom , ings })\n      this.setState({recettes , newRecette : ''});\n      localStorage.setItem(id, JSON.stringify({nom : nom,ings : ings}));\n    }\n  }\n                  /*affecter la valeur ecrite au newReactte*/\n  handleNewRecetteChange = (e) =>{\n    this.setState({newRecette : e.currentTarget.value});\n  }\n                  /*modifier le nom de la recette*/\n  editRecette = (recetteEdited) => {\n    const recettes = [...this.state.recettes];\n    const index = recettes.findIndex(function(recette){\n      return recette.id === recetteEdited.id\n    });\n    recettes[index]= recetteEdited;\n    this.setState({recettes});\n    localStorage.setItem(recettes[index].id, JSON.stringify({nom : recettes[index].nom,ings : recettes[index].ings}));\n  }\n                  /*supprimer une recette*/\n  deleteRecette = (id) => {\n    const recettes = [...this.state.recettes];\n    const index = recettes.findIndex(function(recette){\n      return recette.id === id\n    });\n    localStorage.removeItem(recettes[index].id);\n    recettes.splice(index,1);\n    this.setState({recettes});\n  }\n  componentDidMount() {\n    var keys = Object.keys(localStorage);\n    var l = keys.length;\n    if(l>0){\n      const recettes = [];\n      for(var i=0;i<keys.length;i++){\n        var ingR = [];\n        var rec = JSON.parse(localStorage.getItem(keys[i]));\n        for(var j=0;j<rec.ings.length;j++){\n          ingR.push({id : rec.ings[j].id, nom : rec.ings[j].nom});\n        }\n        recettes.push({id : keys[i], nom: rec.nom, ings : ingR});\n      }\n      this.setState({ recettes, newRecette : '' });\n    }\n  }\n  \n  \n                  /**/\n  render(){\n    return (\n      <div className=\"App container\">\n        <br/>\n        <h1 className=\"display-3 text-center\">Ajouter une Recette</h1>\n        <br/>\n        <form onSubmit={this.handleNewRecetteSubmit}>\n          <div className=\"form-group\">\n           \n            <input className=\"form-control\" type=\"text\" placeholder=\"Ajoouter le Nom de la Recette\"  value={this.state.newRecette} onChange={this.handleNewRecetteChange} />\n          </div>\n          <button className=\"btn btn-outline-dark \">Ajouter</button>\n        </form>\n        <hr/>\n        {/* afficher la liste des recettes*/}\n        <h1 className=\"display-4 text-center\">Recettes</h1>\n        <div className=\"row row-cols-1 row-cols-md-3\">\n          {this.state.recettes.map(recette => (\n            <Recette detail={recette} editRecette={this.editRecette} deleteRecette={this.deleteRecette} key={recette.id} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}